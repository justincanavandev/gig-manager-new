// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Music models

model Musician {
    id          String                   @id @default(cuid())
    name        String
    instruments MusiciansOnInstruments[]
    phoneNumber String
    email       String                   @unique
    gigs        GigsOnMusicians[]
}

model Instrument {
    id        String                   @id @default(cuid())
    name      String                   @unique
    musicians MusiciansOnInstruments[]
    gigs      GigsOnInstrument[]
}

model MusiciansOnInstruments {
    musician     Musician   @relation(fields: [musicianId], references: [id])
    musicianId   String
    instrument   Instrument @relation(fields: [instrumentId], references: [id])
    instrumentId String

    @@id([musicianId, instrumentId])
}

model GigsOnMusicians {
    musician   Musician @relation(fields: [musicianId], references: [id])
    musicianId String
    gig        Gig      @relation(fields: [gigId], references: [id])
    gigId      String

    @@id([musicianId, gigId])
}

model GigsOnInstrument {
    gig          Gig        @relation(fields: [gigId], references: [id])
    gigId        String
    instrument   Instrument @relation(fields: [instrumentId], references: [id])
    instrumentId String

    @@id([gigId, instrumentId])
}

model Gig {
    id              String             @id @default(cuid())
    name            String             @unique
    startTime       DateTime
    endTime         DateTime
    venue           Venue              @relation(fields: [venueId], references: [id])
    venueId         String
    musicians       GigsOnMusicians[]
    instrumentation GigsOnInstrument[]
}

model Venue {
    id       String    @id @default(cuid())
    name     String    @unique
    gigs     Gig[]
    location Location?
}

model Location {
    id      String @id @default(cuid())
    address String
    city    String
    state   String
    zipCode String
    venue   Venue  @relation(fields: [venueId], references: [id])
    venueId String @unique
}

// Musician hasMany Gigs, Gigs hasMany Musicians
// Gig hasMany instruments, instrument hasManyGigs
